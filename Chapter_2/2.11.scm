#lang scheme

(define (make-interval a b) (cons a b))
(define upper-bound cdr)
(define lower-bound car)

(define (mul-interval x y)
  (let ((lx (lower-bound x))
	(ly (lower-bound y))
	(ux (upper-bound x))
	(uy (upper-bound y)))
    (cond ((and (>= lx 0) (>= ly 0))
	   (make-interval (* lx ly) (* ux uy)))
	  ((and (<= ux 0) (<= uy 0))
	   (make-interval (* ux uy) (* lx ly)))
	  ((and (>= lx 0) (<= uy 0))
	   (make-interval (* ux ly) (* lx uy)))
	  ((and (<= ux 0) (>= ly 0))
	   (make-interval (* lx uy) (* ux ly)))
	  (else (let ((p1 (* (lower-bound x) (lower-bound y)))
		      (p2 (* (lower-bound x) (upper-bound y)))
		      (p3 (* (upper-bound x) (lower-bound y)))
		      (p4 (* (upper-bound x) (upper-bound y))))
		  (make-interval (min p1 p2 p3 p4)
				 (max p1 p2 p3 p4)))))))

(mul-interval (make-interval 5 6)
	      (make-interval 3 4)) ;(15, 24)
(mul-interval (make-interval 5 6)
	      (make-interval -3 4)) ;(-18, 24)
(mul-interval (make-interval -5 6)
	      (make-interval 3 4)) ;(-20, 24)
(mul-interval (make-interval -6 5)
	      (make-interval 3 4)) ;(-24, 20)
(mul-interval (make-interval 5 6)
	      (make-interval -4 3)) ;(-24, 18)
(mul-interval (make-interval 5 6)
	      (make-interval -4 -3)) ;(-24, -15)
(mul-interval (make-interval -6 -5)
	      (make-interval 3 4)) ;(-24, -15)
(mul-interval (make-interval 0 6)
	      (make-interval 3 4)) ;(0, 24)
(mul-interval (make-interval 5 6)
	      (make-interval -3 0)) ;(-18, 0)

